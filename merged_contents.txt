Cargo.lock:
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = "cracker"
version = "0.1.0"




Cargo.toml:
[package]
name = "cracker"
version = "0.1.0"
edition = "2021"

[dependencies]




builtins.rs:
use std::env;
use std::path::Path;

pub fn handle_builtin(command: &str, args: &[String]) -> bool {
    match command {
        "cd" => {
            change_directory(args);
            true
        }
        "exit" => {
            std::process::exit(0);
        }
        "help" => {
            super::help::show_help();
            true
        }
        "echo" => {
            echo(args);
            true
        }
        "pwd" => {
            print_working_directory();
            true
        }
        _ => false,
    }
}

fn change_directory(args: &[String]) {
    let dir = if args.is_empty() {
        env::var("HOME").unwrap_or_else(|_| String::from("/"))
    } else {
        args[0].clone()
    };
    if let Err(e) = env::set_current_dir(Path::new(&dir)) {
        eprintln!("cracker: cd: {}: {}", dir, e);
    }
}

fn echo(args: &[String]) {
    println!("{}", args.join(" "));
}

fn print_working_directory() {
    match env::current_dir() {
        Ok(path) => println!("{}", path.display()),
        Err(e) => eprintln!("cracker: pwd: {}", e),
    }
}




commands.rs:
use std::process::{Command, Stdio};

pub fn execute(command: &str, args: &[String]) -> bool {
    println!("Executing command: {} with args: {:?}", command, args); // Debug print
    let status = Command::new(command)
        .args(args)
        .stdin(Stdio::inherit())
        .stdout(Stdio::inherit())
        .stderr(Stdio::inherit())
        .status();

    match status {
        Ok(status) => {
            if !status.success() {
                eprintln!("cracker: command failed with status: {}", status);
            }
            true
        }
        Err(e) => {
            eprintln!("cracker: command not found: {}", e);
            false
        }
    }
}





help.rs:
pub fn show_help() {
    println!("Cracker Shell - Available commands:");
    println!("cd <dir>   - Change directory");
    println!("exit       - Exit the shell");
    println!("help       - Show this help message");
    println!("echo <text> - Display a line of text");
    println!("pwd        - Print the current working directory");
    println!("ls         - List directory contents");
    println!("cat <file> - Display file contents");
    println!("grep <pattern> <file> - Search for patterns in files");
    println!("touch <file> - Create an empty file");
    println!("rm <file>   - Remove files or directories");
    println!("<command>  - Execute an external command");
    println!("For more information on a specific command, use 'man <command>' (if available).");
}




main.rs:
// main.rs or lib.rs
mod builtins;
mod commands;
mod help;
mod redirection;
mod shell;
mod utils;

fn main() {
    shell::start();
}




redirection.rs:
use std::fs::{File, OpenOptions}; // Add OpenOptions here
use std::process::{Command, Stdio};

pub fn execute_with_redirection(command: &str, args: &[&str], input_redir: Option<&str>, output_redir: Option<&str>, append: bool) {
    let mut command_process = Command::new(command);

    if let Some(input_file) = input_redir {
        let file = File::open(input_file).unwrap_or_else(|_| {
            eprintln!("cracker: no such file or directory: {}", input_file);
            std::process::exit(1);
        });
        command_process.stdin(Stdio::from(file));
    }

    if let Some(output_file) = output_redir {
        let file = if append {
            OpenOptions::new().write(true).create(true).append(true).open(output_file)
        } else {
            OpenOptions::new().write(true).create(true).truncate(true).open(output_file)
        }.unwrap_or_else(|_| {
            eprintln!("cracker: cannot write to file: {}", output_file);
            std::process::exit(1);
        });
        command_process.stdout(Stdio::from(file));
    }

    let status = command_process.args(args)
        .stdin(Stdio::inherit())
        .stdout(Stdio::inherit())
        .stderr(Stdio::inherit())
        .status();

    match status {
        Ok(status) => {
            if !status.success() {
                eprintln!("cracker: command failed with status: {}", status);
            }
        }
        Err(e) => eprintln!("cracker: command not found: {}", e),
    }
}




shell.rs:
use std::io::{self, Write};
use crate::builtins;
use crate::commands;
use crate::utils;

pub fn start() {
    loop {
        // Display the prompt
        print!("cracker> ");
        io::stdout().flush().unwrap();

        // Read user input
        let mut input = String::new();
        io::stdin().read_line(&mut input).unwrap();
        let input = input.trim();

        // Skip empty input
        if input.is_empty() {
            continue;
        }

        // Split the input into command and arguments
        let (command, args) = utils::split_command_line(input);

        // Check for built-in commands
        if utils::is_builtin(&command) {
            if builtins::handle_builtin(&command, &args) {
                continue;
            }
        } else {
            // Handle external commands
            if commands::execute(&command, &args) {
                continue;
            }
        }

        // If the command is neither built-in nor an external command
        eprintln!("cracker: command not found: {}", input);
    }
}




utils.rs:
// Utility functions for the Cracker shell

/// Checks if a given command is a built-in command
pub fn is_builtin(command: &str) -> bool {
    match command {
        "cd" | "exit" | "help" | "echo" | "pwd" => true,
        _ => false,
    }
}

/// Splits a command line input into command and arguments
pub fn split_command_line(input: &str) -> (String, Vec<String>) {
    let mut parts = input.split_whitespace();
    let command = parts.next().unwrap_or("").to_string();
    let args = parts.map(|s| s.to_string()).collect();
    (command, args)
}




s-gylbcvzinp-w3uq97.lock:




s-gylbcvznyf-jtjbsr.lock:




s-gylbd83235-xusf3s.lock:




Directory structure:
.
├── Cargo.lock
├── Cargo.toml
├── merged_contents.sh
├── merged_contents.txt
├── src
│   ├── builtins.rs
│   ├── commands.rs
│   ├── help.rs
│   ├── main.rs
│   ├── redirection.rs
│   ├── shell.rs
│   └── utils.rs
└── target
    ├── CACHEDIR.TAG
    └── debug
        ├── build
        ├── cracker.d
        ├── cracker.exe
        ├── cracker.pdb
        ├── deps
        │   ├── cracker-b3a7fdd0bd56fdde.d
        │   ├── cracker-e825fc89cde4ea91.d
        │   ├── cracker.d
        │   ├── cracker.exe
        │   ├── cracker.pdb
        │   ├── libcracker-b3a7fdd0bd56fdde.rmeta
        │   └── libcracker-e825fc89cde4ea91.rmeta
        ├── examples
        ├── incremental
        │   ├── cracker-1b25juj3kidhk
        │   │   ├── s-gylbcvzinp-w3uq97-6kjmph2nkdv7olslup5gv3osl
        │   │   │   ├── dep-graph.bin
        │   │   │   ├── query-cache.bin
        │   │   │   └── work-products.bin
        │   │   └── s-gylbcvzinp-w3uq97.lock
        │   ├── cracker-35e8qo2q2jifj
        │   │   ├── s-gylbcvznyf-jtjbsr-1cljtyfvk188tocvwv2d8ibj9
        │   │   │   ├── dep-graph.bin
        │   │   │   ├── query-cache.bin
        │   │   │   └── work-products.bin
        │   │   └── s-gylbcvznyf-jtjbsr.lock
        │   └── cracker-rr0fiv4spmjz
        │       ├── s-gylbd83235-xusf3s-aauxkinwqywvj2twfj8c5v97o
        │       │   ├── 114mib1q05ijhppn.o
        │       │   ├── 13nyz3a21kws1mtm.o
        │       │   ├── 19i1bben9fj46ryx.o
        │       │   ├── 19tjt6n28h9h0o29.o
        │       │   ├── 1ajcsnwv7wlaupzv.o
        │       │   ├── 1ecdpg5gg3ggvmy9.o
        │       │   ├── 1fdg1ci39u7gs7k9.o
        │       │   ├── 1qdkw89c9d08xrbe.o
        │       │   ├── 1s0h4ye6686qilwc.o
        │       │   ├── 1s626n8isjilfthq.o
        │       │   ├── 1x9yjai9410b0zi7.o
        │       │   ├── 1ynlqw48vxdvcdzq.o
        │       │   ├── 211lsp3pvvpkr6jp.o
        │       │   ├── 24udgfqyroloxger.o
        │       │   ├── 24xvbzc4senjdfdd.o
        │       │   ├── 263ov3icx8krsecd.o
        │       │   ├── 268rg4e27f3b6v9v.o
        │       │   ├── 28llfpu52hcy6bww.o
        │       │   ├── 2cuov65m0sxc3eba.o
        │       │   ├── 2kvpy4guz59wbphb.o
        │       │   ├── 2n0k2g2jmwh7m93n.o
        │       │   ├── 2ri4uhzhvei5j76m.o
        │       │   ├── 2x2nl39p7a5c7uej.o
        │       │   ├── 2yt2sijn7vcpnbue.o
        │       │   ├── 2z5x6a8jqt11gxk2.o
        │       │   ├── 312iv494r0bso1ux.o
        │       │   ├── 33swx796fbqzof0.o
        │       │   ├── 34mcp6ax2uoql5aw.o
        │       │   ├── 390kal5n1h07nplw.o
        │       │   ├── 3aee3syhglhnrhka.o
        │       │   ├── 3b2bi2zdbvvt9eiq.o
        │       │   ├── 3gnd89a7mj5jnonw.o
        │       │   ├── 3i0g2pwb22h9ba77.o
        │       │   ├── 3iyv4hvqy5ninng6.o
        │       │   ├── 3ngjogvz6dijyt7l.o
        │       │   ├── 3re3nlpceb2dkch2.o
        │       │   ├── 40dxfsc5kfmic0rx.o
        │       │   ├── 41biu7ii0a8pf1w3.o
        │       │   ├── 41w811zulrliz917.o
        │       │   ├── 46xf7jvnugoq0jjy.o
        │       │   ├── 48f3eo1rnc3ap5i5.o
        │       │   ├── 4anllqur57i7k22u.o
        │       │   ├── 4e20whuquot499ny.o
        │       │   ├── 4i3ixxjw1xfxtmbp.o
        │       │   ├── 4igyze9l406vb7hf.o
        │       │   ├── 4srqzkpqlpzkelws.o
        │       │   ├── 4vh3zjfr4n7foulc.o
        │       │   ├── 4zt7l5k9st6vptli.o
        │       │   ├── 52082foz8l6jj0qw.o
        │       │   ├── 588gl6drgieognz4.o
        │       │   ├── 595is40b1vz9aw0c.o
        │       │   ├── 5anyktky7xtwztfj.o
        │       │   ├── 5b31iemgxhysit06.o
        │       │   ├── 5cwbjcm7vbd52cqs.o
        │       │   ├── 5eap821ndb9qcqcm.o
        │       │   ├── 5edm2pi1ov7rryw5.o
        │       │   ├── 6jcb65qjn6u9iy4.o
        │       │   ├── 8w74ph0sgihnfd3.o
        │       │   ├── bd848wco9grkypq.o
        │       │   ├── dep-graph.bin
        │       │   ├── h64952cczgnomjs.o
        │       │   ├── l41bqd6n94e5p42.o
        │       │   ├── m35x6ubcu48ik1k.o
        │       │   ├── o2xcvnukpj6ouvi.o
        │       │   ├── pckjpq65dbodunp.o
        │       │   ├── query-cache.bin
        │       │   ├── s1s9b3940vtb2vy.o
        │       │   ├── un39pvq4uzm1ggr.o
        │       │   ├── vdezq6p3hwzqlhs.o
        │       │   ├── work-products.bin
        │       │   └── z33aesmf6kn8vhn.o
        │       └── s-gylbd83235-xusf3s.lock
        └── merged_contents.txt

13 directories, 103 files
